/*
-----------CONSIGNA PRIMER PARCIAL (Parte 3)----------------------------------
1. Considerando el último número de tu número de documento (DNI o documento de
identidad), agrega un componente adicional que afecte el funcionamiento del proyecto.
Describe en detalle qué hace este nuevo componente y cómo se integra en el proyecto.

-Si tu número de documento termina en (0-3) deberás implementar a tu proyecto la
fotoresistencia
---------------------------------------------------------------------
#define CERO 10
#define UNO 13
#define DOS 12
#define TRES 11
#define CUATRO 7
#define CINCO 6
#define SEIS 5

#define INTERRUPTOR_SWITCH 2

#define DECENAS A5
#define UNIDAD A4

#define TIME_DISPLAY_ON 10
//tiempo de alternado en la multiplexacion 
#define APAGADO 0

#define INTERVALO 300
//intervalo para aumentar el contador segun el tiempo

//constantes

unsigned long previoMillis = 0;
//unsigned long ("se usa para definir que el numero no puede 
//ser negativo")

int ultimoPrimoEncontrado = 0;
int contador = 0;
//variables

#define SENSOR_TMP A0
int lecturasTemperatura = 0;
//sensor de temperatura

#define MOTORCC 9
int velocidad = 0;
//motor cc

#define FOTORESISTENCIA A1
int luminosidad = 0;
int luminosidadRelativa = 0;
//resistencia



void setup()
{
  pinMode(CERO, OUTPUT);
  pinMode(UNO, OUTPUT);
  pinMode(DOS, OUTPUT);
  pinMode(TRES, OUTPUT);
  pinMode(CUATRO, OUTPUT);
  pinMode(CINCO, OUTPUT);
  pinMode(SEIS, OUTPUT);
  
  pinMode(INTERRUPTOR_SWITCH, INPUT_PULLUP);  
  
  pinMode(DECENAS, OUTPUT);
  pinMode(UNIDAD, OUTPUT);
  
  pinMode(SENSOR_TMP, INPUT);
  //sensor temperatura
  
  pinMode(MOTORCC, OUTPUT);
  //motor
  
  pinMode(FOTORESISTENCIA, INPUT);
  //fotoresistencia

  Serial.begin(9600);
}


void loop()
{
if (digitalRead(INTERRUPTOR_SWITCH)==1)
//si el switch esta apagado muestro solo numeros primos.
{
  PrintContadorNumerosPrimos(contador);
//muestro solo numeros primos
  velocidad = (contador + lecturasTemperatura) + 31;
/*la velocidad se calcula sumando el contador y los valores del 
sensor de temperatura y se le suma 26 (para alcanzar el voltaje max
entregado por arduino "255") */   
  analogWrite(MOTORCC, velocidad);   
}

  
else
//si el switch esta prendido muestro todos los numeros "0-99".
{
  PrintContador(contador); 
  velocidad = (contador + lecturasTemperatura) + 31;
/*la velocidad se calcula sumando el contador y los valores del 
sensor de temperatura y se le suma 26 (para alcanzar el voltaje max
entregado por arduino "255") */ 
  
  if(lecturasTemperatura == -40)
//si la temperatura es -40 el motor se apaga    
  {
  velocidad = 0;
  } 
  analogWrite(MOTORCC, velocidad);
}
  
    
AumentarContador();
  
  
if (contador >= 99)
//si el contador llega a 99 se reinicia.
  {
    contador = 0;
  }
  
lecturasTemperatura = map(analogRead(SENSOR_TMP),20,358, -40,125);
/*lee los valores de el sensor de temperatura y hace la 
convercion de valores que indican la temperatura*/
  
luminosidad = analogRead(FOTORESISTENCIA);
luminosidadRelativa = luminosidad - 55;
/*la luminisidad relativa afecta los led de los 7 segmentos 
siguientes: B-G-C*/
  
  
//la luminosdad se le resta 55 para que la max luminosidad sea 255
if (luminosidadRelativa <=1)
{
//si la luminosidad es negativa se establece en 0
luminosidadRelativa = 0;
} 
}


void AumentarContador()
/*esta funcion sive para aumentar el contador segun el tiempo
indicado en el intervalo.*/
{
  unsigned long actualMillis = millis();
/*unsigned long ("se usa para definir que el numero no puede 
ser negativo").*/
  
  if (actualMillis - previoMillis >= INTERVALO)
/*
si la diferencia entre el tiempo actual y el previo
es mayor o igual al intervalo entonces aumento el contador
*/  
  {
   previoMillis = actualMillis;
//actualizo el tiempo previo
   contador += 1;
  }
     
}


bool CalcularNumerosPrimos(int numero)
{
//valida si un numero es primo
    if (numero <= 1) 
    {
        return false;
    }
//el 0 y el 1 no son numeros primos
    else if (numero <= 3) 
    {
        return true;
    }
//casos especiales para 2 y 3
  
    if (numero % 2 == 0 || numero % 3 == 0) 
//Si es divisible por 2 o 3, no es primo
    {
        return false;
    }
  
    int i = 5;
    while (i * i <= numero)
/*Comprobar divisibilidad por números de la forma 6k ± 1.
este proceso busca divisores, si los encuentra es porque 
el numero no es primo.*/
    {
        if (numero % i == 0 || numero % (i + 2) == 0) 
        {
            return false;
        }
        i += 6;
    }
    return true;
// Si no se encontraron divisores, el número es primo
}


void PrintDigit(int digit)
{
//muestra el numero especificado en el display 7 segmentos.
switch(digit)
{
  case 0:
  {
    EncenderCero(0);
    break;
  }
    case 1:
  {
    EncenderUno(0);
    break;
  }
    case 2:
  {
    EncenderDos(0);
    break;
  }
    case 3:
  {
    EncenderTres(0);
    break;
  }
    case 4:
  {
    EncenderCuatro(0);
    break;
  }
    case 5:
  {
    EncenderCinco(0);
    break;
  }
    case 6:
  {
    EncenderSeis(0);
    break;
  }
    case 7:
  {
    EncenderSiete(0);
    break;
  }
    case 8:
  {
    EncenderOcho(0);
    break;
  }
    case 9:
  {
    EncenderNueve(0);
    break;
  }
}  
}

void PrintContadorNumerosPrimos(int contador)
{
//imprime el ultimo numero primo hasta que aparezca otro.
if (CalcularNumerosPrimos(contador))
  {
  PrintContador(contador);
  ultimoPrimoEncontrado = contador;
  }
else
{
  PrintContador(ultimoPrimoEncontrado);
} 
}


void PrintContador(int contador)
{
/*se encarga del efecto de "multiplexacion" y genera un bucle encargado
de mostrar el digito (decena o unidad) en el display correcto.  

Multiplexacion: es el efecto que se produce al alternar el encendido 
y apagado de los dos 7 segmentos muy rapido, esto produce el efecto 
visual de la activacion "simultanea"*/
  
  PrendeDigito(APAGADO);
//apagamos los display
  PrintDigit(contador / 10);
/*esta cuenta calcula que valor tiene la decena segun el valor del 
contador, y envia la señal del numero.*/
  PrendeDigito(DECENAS);
//encendemos las decenas y "recibimos el numero a imprimir".

  
  PrendeDigito(APAGADO);
//apagamos los display
  PrintDigit(contador - 10 * ((int)contador / 10));
/*esta cuenta calcula que valor tiene la unidad segun el valor del 
contador, y envia la señal del numero.*/
  PrendeDigito(UNIDAD);
//encendemos las unidad y "recibimos el numero a imprimir".
}


void PrendeDigito(int digito)
{
/*se encarga de alternar el estado de los 7 segmentos, mediante
los common "enviando 0 o 1"*/
  if (digito == UNIDAD)
  {
//si se "activa" la unidad se apaga la decena.
    digitalWrite(UNIDAD, LOW);
    digitalWrite(DECENAS, HIGH);
    delay(TIME_DISPLAY_ON);
//un delay muy bajo para dar la ilusion de activacion doble.
  }
  
  else if (digito == DECENAS)
  {
//si se "activa" la decena se apaga la unidad.
    digitalWrite(UNIDAD, HIGH);
    digitalWrite(DECENAS, LOW);
    delay(TIME_DISPLAY_ON);
//un delay muy bajo para dar la ilusion de activacion doble.
  }
  
  else
  {
    digitalWrite(UNIDAD, HIGH);
    digitalWrite(DECENAS, HIGH);
//si no se indica una unidad, ambas se apagan.
  }
}


void EncenderLed(char ledX, int tiempo)
{
//se encarga de encender los led.
  digitalWrite(ledX, 1);  
  delay(tiempo);
}

void ApagarLed(char ledX, int tiempo)
{
//se encarga de apagar los led.
  digitalWrite(ledX, 0);
  delay(tiempo);
}

void TitilarLed(char ledX, int tiempo)
{
//se encarga de titilar los led.
  EncenderLed(ledX, tiempo);
  ApagarLed(ledX, 0);
} 
  
void ApagarTodo()
{
//apaga todos los led de los 7 segmentos.
  ApagarLed(CERO,0);
  ApagarLed(UNO, 0);
  ApagarLed(DOS, 0);
  ApagarLed(TRES,0);
  ApagarLed(CUATRO,0);
  ApagarLed(CINCO,0);
  ApagarLed(SEIS,0);
}

void EncenderTodo()
{
//enciende todos los led de los 7 segmentos.
  EncenderLed(CERO,0);
  EncenderLed(UNO, 0);
  EncenderLed(DOS, 0);
  EncenderLed(TRES,0);
  EncenderLed(CUATRO,0);
  EncenderLed(CINCO,0);
  EncenderLed(SEIS,0);
}

/* funciones para activar los led de los 7 segmentos para mostrar el 
numero especifico*/

/*altero el encendido de los led para que se enciendan segun la 
luminosidad relativa*/
void EncenderCero(int tiempo)
{	ApagarTodo();  
  EncenderLed(UNO, 0);
  EncenderLed(DOS, 0);
  analogWrite(TRES,luminosidadRelativa);
  EncenderLed(CUATRO,0);
  EncenderLed(CINCO,0);
  analogWrite(SEIS,luminosidadRelativa);
  delay(tiempo);    
}

void EncenderUno(int tiempo)
{	ApagarTodo();
  analogWrite(TRES,luminosidadRelativa);
  analogWrite(SEIS,luminosidadRelativa);
    delay(tiempo);    
}

void EncenderDos(int tiempo)
{	ApagarTodo();
  analogWrite(CERO,luminosidadRelativa);
  EncenderLed(DOS, 0);
  analogWrite(TRES,luminosidadRelativa);
  EncenderLed(CUATRO,0);
  EncenderLed(CINCO,0); 
  delay(tiempo);    
}

void EncenderTres(int tiempo)
{	ApagarTodo();
  analogWrite(CERO,luminosidadRelativa);
  EncenderLed(DOS, 0);
  analogWrite(TRES,luminosidadRelativa);
  EncenderLed(CINCO,0);
  analogWrite(SEIS,luminosidadRelativa);   
    delay(tiempo);    
}

void EncenderCuatro(int tiempo)
{	ApagarTodo();
  analogWrite(CERO,luminosidadRelativa);  
  analogWrite(TRES,luminosidadRelativa);  
  analogWrite(SEIS,luminosidadRelativa);
  EncenderLed(UNO, 0);
  delay(tiempo);    
}

void EncenderCinco(int tiempo)
{	ApagarTodo();
  
  EncenderLed(UNO, 0);
  EncenderLed(DOS, 0);
  analogWrite(CERO,luminosidadRelativa);     
  analogWrite(SEIS,luminosidadRelativa);  
  EncenderLed(CINCO,0);
  delay(tiempo);    
}

void EncenderSeis(int tiempo)
{	ApagarTodo();
  analogWrite(CERO,luminosidadRelativa);
  EncenderLed(UNO, 0);
  EncenderLed(DOS, 0);
  EncenderLed(CUATRO,0);
  EncenderLed(CINCO,0);
  analogWrite(SEIS,luminosidadRelativa); 
    delay(tiempo);    
}

void EncenderSiete(int tiempo)
{	
    ApagarTodo();
  EncenderLed(DOS, 0);
  EncenderLed(TRES,0);
  analogWrite(SEIS,luminosidadRelativa); 
    delay(tiempo);    
}

void EncenderOcho(int tiempo)
{	
    ApagarTodo();
  EncenderLed(UNO, 0);
  EncenderLed(DOS, 0); 
  EncenderLed(CUATRO,0);
  EncenderLed(CINCO,0);
  analogWrite(CERO,luminosidadRelativa);  
  analogWrite(TRES,luminosidadRelativa);  
  analogWrite(SEIS,luminosidadRelativa);
    delay(tiempo);
}

void EncenderNueve(int tiempo)
{	
    ApagarTodo();
  EncenderLed(UNO, 0);
  EncenderLed(DOS, 0); 
  analogWrite(CERO,luminosidadRelativa);  
  analogWrite(TRES,luminosidadRelativa);  
  analogWrite(SEIS,luminosidadRelativa);
    delay(tiempo);
}
